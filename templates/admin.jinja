<!-- the whole admin page content shall be shown only if 'admin' is logged-in. NB! It is made possible in 'app.py' to make a username 'admin' in ALL cases, whether 'admin' is in db or not, and whether 'admin' even exists at all or not (admin is NOT in db, btw, admin password is only set as env.var, as you can see in 'app.py') -->
{% extends "layout.jinja" %}
{% block title %} admin {% endblock %}
{% block content %}

{% if session.username == 'admin' %}

    <!-- the beauty of a <script> without type="module" is that now these functions below are available in the whole HTML document with no further hassle. -->
    <script>
        const baseUrl = `${window.location.protocol}//${window.location.host}`  // this ensures that both http:// (local) and https:// (fly.io) work; so https: would be 'protocol', and 'dinerappthing.fly.dev' would be the host
        const toggleVisibilityOf = (id, target) => {
            console.log(`toggle visibility for the following target: table '${target}', id ${id}`)
            fetch(`${baseUrl}/api/toggle-visibility-of/${target}/${id}`, { 
                method:'PUT',
                headers:{'X-CSRF-Token': '{{ session.csrf_token }}' }
            })
            .then(response => response.json())
            .then(data => {
                console.log("data after updating id:", data)
                window.location.reload()        // I'm refreshing the page with my superpowers! An alternative would be to manually add the new information as a new HTML element... and then also add aaaall the buttons and whatnot to that according to the situation, but that would be too much work here, require a lotta functions etc. This is not React (unfortunately)
            })
        }

        const deleteCategory = categoryId => {
            fetch(`${baseUrl}/api/delete-category/${categoryId}`, {
                method:'DELETE', 
                headers:{'X-CSRF-Token': '{{ session.csrf_token }}' }
                })
            .then(response => response.json())
            .then(data => {
                if (data.status === 'ok') {
                    document.querySelector(`#category-id-${categoryId}`).style.display = 'none' // behold, it's now removed from the site
                    console.log("deleted successfully:",data)
                } else {
                    console.log("ERROR in deletion in backend:",data)
                }
                
                })
            .catch(error => console.error(error))
        }
    </script>

    <h1> Welcome ! </h1>
    <p><em>Welcome, o dear admin!</em></p>
    <h2>restaurants</h2>    

    <ul>
        {% for restaurant in restaurants %}
            <li>  <p> {{ restaurant.restaurant_name | e }} </p>
                <ul>
                    <li> address: {{ restaurant.address | e }}</li>
                    <li class="colored"> visible: {{ restaurant.restaurant_visible | e }} </li>
                    <li> categories
                        <ul>
                            {% for category in restaurant_categories %}
                                {% if category.restaurant_id == restaurant.id %}
                                    {% if category.category_visible %}
                                        {% set buttonText = 'hide category' %}
                                    {% else %}
                                        {% set buttonText = 'reapply category' %}
                                    {% endif %}
                                    <li class="colored" id='category-id-{{ category.id }}'> 
                                        {{ category.category | e }}, visible: {{ category.category_visible | e }} <br>
                                        <button onclick="toggleVisibilityOf( {{ category.id }}, 'restaurant_categories')"> {{ buttonText }} </button>
                                        <button onclick="deleteCategory( {{ category.id }} )"> delete category </button>
                                    </li>
                                {% endif %}
                            {% endfor %}
                            <form id="new-category" data-restaurant_id="{{ restaurant.id }}">
                                <input type="text" name="new_category">
                                <button> add new category </button>
                            </form>   
                        </ul>
                    </li>
                </ul>
                {% if restaurant.restaurant_visible%}
                    <button onclick="toggleVisibilityOf( {{ restaurant.id }}, 'restaurants' )"> hide place from users </button>
                {% else %}
                    <button onclick="toggleVisibilityOf( {{ restaurant.id }}, 'restaurants' )"> show place to users </button>
                {% endif %}
            </li>
        {% endfor %}
    </ul>

    <script type="module"> // you have to always write ' type="module" ' if you import anything in <script>. The side effect of this type="module" is (as I just learned from Chat GPT, thanks AI!) that none of the functions (and other variables) defined in this 'module' <script> in question are no longer global - no longer accessible elsewhere, where I would want to actually use them! (I'd like to use the function checkCategory on form.onSubmit); therefore, I could no longer refer to the function checkCategory below UNLESS I assign it to the window object.
        import apiServices from '../static/apiServices.js'

        const forms = document.querySelectorAll('#new-category')
        forms.forEach(form => {
            form.addEventListener('submit', event => {
            event.preventDefault(); // prevent default submitting

            const form = event.currentTarget
            const newCategory = form.new_category.value
            const restaurant_id = form.dataset.restaurant_id                    // 1st way of doing it
            // const restaurant_id = form.getAttribute('data-restaurant_id')    // 2nd way. Both do the same! c: (I tried both out)

            if (newCategory === '') {
                alert("Come on, give me something to work with, will ya?")
                return false;
            } else {
                apiServices.post(`/add-category/${restaurant_id}`, { new_category: newCategory }) // NB! apiServices.post uses async-await. Normally you would never mix '.then' (used below) and 'async' + 'await' (used in apiServices.post), but I don't feel like rewriting the whole thing below again c: AND! Apparently this works, which is awesome. I asked the almighty ChatGPT if it's ok to mix the two and the answer was yes - and indeed it works. In both cases we're working with Promises after all. A Promise is a Promise!
                .then(response => response.json())
                .then(data => {
                    if (data.status === 'ok') { // I passed 'status:ok' as JSON from app.py c:
                        const successMessage = document.createElement("p")
                        successMessage.style.color = 'green';
                        successMessage.textContent = `Category "${newCategory}" added to database. Refresh if you want to see the new addition above.`;
                        form.appendChild(successMessage);

                        form.new_category.value = ''; // Reset the input field
                    } else {
                        alert('Error: ' + data.message);
                    }
                })
                .catch(error => {
                    console.error('Error:', error);
                });
                return false; // Return false to stop submission
            }
            })
        })
    </script>

    <h2> add a restaurant: </h2>
    <p>
    NB! It is not necessary to provide the exact name or address in the search below:
    Google Places API search will also find locations based on approximate search terms, and the name and address 
    you provide in 'restaurant name' and 'restaurant address' below are used only for that. The search name and address
    that you use below will NOT remain as-is in the database either: they are used ONLY for initial querying the Google Places API
    in 'index.js': they will be updated in the db once you go to the map at '/restaurants'; as the API is used there ('index.js'),
    the db will be updated at the same time. 
    ((sidenote: the list below the map will have the updated names on the 2nd run (1st refresh) at '/restaurants'.))

    For example: 'iso paja', 'kumpula' will successfully locate 'Ravintola Iso Paja' at address 
    'Radiokatu 3, 00240 Helsinki, Finland' - NOTABLY! - even though its location is somewhat far from actual 'Kumpula'. 
    The correct info will be shown in the map to the users regardless.
    </p>

    <form id="new-restaurant">
        <p> restaurant name
            <input type="text" name="restaurant_name" > </p>
        <p> restaurant address
            <input type="text" name="address"> </p>
        <button>add restaurant</button> <!-- when a button is in a form, by default it submits-->
    </form>

    <script type="module"> 
        import apiServices from '../static/apiServices.js'
        document.querySelector("#new-restaurant").addEventListener('submit', event => { // what I had done previously (not safe): onSubmit = checkFields, and attaching checkFields itslef to 'window' object so that checkFields is accessible for the above form that uses it. HOWEVER! Checkfields would then be also available in the browser through window.checkFields. So, instead I used the documentQuerySelector to get rid of this problem. An alternative would have been to define the function from apiServices again at the top of the page in a <script>, or to just... not use that at all c:
            event.preventDefault() // otherwise the page will automatically reload, and none of the things below will ever happen c:
            const form = event.currentTarget
            if (form.restaurant_name.value === '' || form.address.value === '') {
                alert("provide both an (approximate) name and a (approximate) address, or the maps api could find the wrong place!")
            } else {
                const body = {
                    restaurant_name:form.restaurant_name.value,
                    address:form.address.value
                }
                apiServices.post('/api/add-restaurant', body, '{{ session.csrf_token }}')
                .then(response => response.json())
                .then(data => {
                    // reset the 'name' and 'address' -fields, and show a message that the operation was successful
                    if (data.status === 'ok') {
                        const successMessage = document.createElement("p") // create a success message paragraph
                        successMessage.style.color = 'green'
                        successMessage.textContent = `Restaurant "${form.restaurant_name.value}" added to database. Refresh if you want to see the new addition above.`
                        form.appendChild(successMessage)
                        form.restaurant_name.value = ''
                        form.address.value = ''             // reset fields in case admin wants to add another right away
                    } else {
                        const errorMessage = document.createElement("p");
                        errorMessage.style.color = 'red';
                        errorMessage.textContent = `Error: ${data.message}`;
                        form.appendChild(errorMessage);
                    }
                })
                .catch(error => console.error(error))  
            }  
        })
    </script>

    <h2>users</h2>
    <ul>
        {% for user in users %}
            <li>
                <p> username: {{ user.username | e }} </p>
                <p> is admin: {{ user.is_admin }} </p>
                <p> email: {{ user.email | e }} </p>
            </li>
        {% endfor %}
    </ul>

    <h2>ratings</h2>
    <ul>
        {% for item in ratings_with_comments_list %}
            <li> <p>{{ item.restaurant_name | e }}, comment "{{ item.comment | e }}" by user "{{ item.username | e}}" </p> <!-- NB! Without | e it doesn't escape <script> and other shit - why? I dunno! If the comment says <script> ..., then without the | e here, I'm in trouble. Why? Don't know. -->
                <ul>
                {% for key, value in item.items()%}
                    <li class="colored">{{ key }} : {{ value | e }}</li> <!-- because of 'comment' and other content, I need to escape the content -->
                {% endfor %}
                </ul>
            </li>
            {% if item.comment_visible %}
            <button onclick="toggleVisibilityOf( {{ item.comment_id }}, 'comments' )">hide comment from users</button> 
            {% else %}
            <button onclick="toggleVisibilityOf( {{ item.comment_id }}, 'comments' )">show comment to users</button> 
            {% endif %}

            {% if item.rating_visible %}
            <button onclick="toggleVisibilityOf( {{ item.rating_id }}, 'ratings')">hide rating from users</button>
            {% else %}
            <button onclick="toggleVisibilityOf( {{ item.rating_id }}, 'ratings')">show rating to users</button>
            {% endif %}
        {% endfor %}
    </ul>
    
    <!-- coloring <li> lines red if FALSE, green if TRUE -->
    <script>
    document.querySelectorAll('.colored').forEach(li => {
        if (li.innerText.includes('True')) {
            li.style.color='green'
            li.style.fontWeight='bold'
        } else if (li.innerText.includes('False')) {
            li.style.color='red'
            li.style.fontWeight='bold'
        }
    })
    </script>
    
{% else %}
    <p>You are not logged in as the administrator. You seem sus.</p>
{% endif %}
{% endblock %}