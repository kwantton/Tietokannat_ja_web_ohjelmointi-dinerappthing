<!-- the whole admin page content shall be shown only if 'admin' is logged-in. NB! It is made possible in 'app.py' to make a username 'admin' in ALL cases, whether 'admin' is in db or not, and whether 'admin' even exists at all or not (admin is NOT in db, btw, admin password is only set as env.var, as you can see in 'app.py') -->
<a href="/"> back to home </a>
<head>
    <link rel="stylesheet" type="text/css" href="{{ url_for ('static', filename='style.css') }}" />
</head>
{% if session.username == 'admin' %}

    <script>
        const toggleVisibilityOf = (id, target) => {
            console.log(`should toggle visibility for the following ${target}:`, id)
            fetch(`/api/toggle-visibility-of-${target}/${id}`)
            .then(response => response.json())
            .then(data => {
                console.log("data after updating id:", data)
                window.location.reload()        // I'm reloading the page with my superpowers!
            })
        }
    </script>

    <h1> Welcome ! </h1>
    <p><em>Welcome, o dear admin!</em></p>
    <h2>restaurants</h2>    
    
    <ul>
        {% for restaurant in restaurants %}
            <li>  <p>{{ restaurant.restaurant_name }}</p>
                <ul>
                    
                    <li> address: {{ restaurant.address }}</li>
                    <li class="colored"> visible: {{ restaurant.restaurant_visible }} </li>
                </ul>
                <button onclick="toggleVisibilityOf( {{ restaurant.id }}, 'restaurant' )"> toggle restaurant visibility to users </button>
            </li>
        {% endfor %}
    </ul>
    
    <h2> add a restaurant: </h2>
    <p>
    NB! It is not necessary to provide the exact name or address in the search below:
    Google Places API search will also find locations based on approximate search terms, and the name and address 
    you provide in 'restaurant name' and 'restaurant address' below are used only for that. The search name and address
    that you use below will NOT remain as-is in the database either: they are used ONLY for initial querying the Google Places API
    in 'index.js': they will be updated in the db once you go to the map at '/restaurants'; as the API is used there (index.js),
    the db will be updated at the same time. 
    ((sidenote: the list below the map will have the updated names on the 2nd run (1st refresh) at '/restaurants'.))
    
    For example: 'iso paja', 'kumpula' will successfully locate 'Ravintola Iso Paja' at address 
    'Radiokatu 3, 00240 Helsinki, Finland' - NOTABLY! - even though its location is somewhat far from actual 'Kumpula'. 
    The correct info will be shown in the map to the users regardless.
    </p>

    <form onsubmit="checkFields(event)">
        
        <p> restaurant name
            <input type="text" name="restaurant_name" > </p>
        <p> restaurant address
            <input type="text" name="address"> </p>
        
        <button>add restaurant</button> <!-- when a button is in a form, by default it submits-->
    </form>

    <script> 
        const checkFields = event => {
            event.preventDefault() // otherwise the page will automatically reload, and none of the things below will ever happen c:
            const form = event.currentTarget
            if (form.restaurant_name.value === '' || form.address.value === '') {
                alert("provide both an (approximate) name and a (approximate) address, or the maps api could find the wrong place!")
            } else {
                // reset the 'name' and 'address' -fields, and show a message that claims that the operation was successful. Note; this doesn't actually check if the operation was successful really; would need to make a call to db to see if the restaurant was really added. An alternative is to refresh the page after the posting, so you can directly see if it worked c:
                const body = {
                    restaurant_name:form.restaurant_name.value,
                    address:form.address.value
                }

                fetch('/api/add-restaurant', {
                    method:'POST',
                    headers: {
                        'Content-Type':'application/json'
                    },
                    body:JSON.stringify(body)
                })
                .then(response => response.json())
                .then(data => {
                    console.log('data:',data)
                    
                    const successMessage = document.createElement("p") // create a success message paragraph
                    successMessage.style.color = 'green'
                    successMessage.textContent = `Restaurant "${form.restaurant_name.value}" added to database. Refresh if you want to see the new addition above.`
                    form.appendChild(successMessage)

                    form.restaurant_name.value = ''
                    form.address.value = ''             // reset fields in case admin wants to add another right away
                })
                .catch(error => console.error(error))  
            }  
        }   
    </script>

    <h2>users</h2>
    <ul>
        {% for user in users %}
            <li>
                <p> username: {{ user.username }} </p>
                <p> is admin: {{ user.is_admin}} </p>
                <p>email: {{ user.email}} </p>
            </li>
        {% endfor %}
    </ul>

    <h2>ratings</h2>
    <ul>
        {% for item in ratings_with_comments_list %}
            <li> <p>{{ item.restaurant_name }}, comment "{{ item.comment }}" by user "{{ item.username }}" </p>
                <ul>
                {% for key, value in item.items()%}
                    <li class="colored">{{ key }} : {{ value }}</li>
                {% endfor %}
                </ul>
            </li>
            <!-- I'm having VSCode underlined red here below, but it works. So, linting problem. Dunno how to fix.-->
            <button onclick="toggleVisibilityOf( {{ item.comment_id }}, 'comment' )">toggle comment visibility to users</button> 
            <button onclick="toggleVisibilityOf( {{ item.rating_id }}, 'rating')">toggle rating visibility to users</button>
        {% endfor %}
    </ul>
    
    <!-- coloring <li> lines red if FALSE, green if TRUE -->
    <script>document.querySelectorAll('.colored').forEach(li => {
        if (li.innerText.includes('True')) {
            li.style.color='green'
            li.style.fontWeight='bold'
        } else if (li.innerText.includes('False')) {
            li.style.color='red'
            li.style.fontWeight='bold'
        }
    })</script>
{% else %}
    <p>You are not logged in as the administrator. You seem sus.</p>
{% endif %}